public class VectorField {

    private static final float PIXEL = -1;
    private static final float UNVISITED = 0;

    private static final float diagonal = 1.41421356237;
    private static final float baseForce = 0.1;
    private static final float forceNoise = 0;

    private List<Spread> tasks;
    public boolean drawMode;
    private float[][] map;
    private String name;

    private List<Frame> frames;
    private int currentFrame;

    VectorField(int width, int height, String name) {
        init();
        map = new float[height][width];

        drawMode = true;
        this.name = name;

        Frame frame = new Frame(width, height);
        frames.add(frame);
        currentFrame = 0;
    }

    VectorField(String mapName, String frameName) {
        init();

        drawMode = false;

        Frame frame = loadMap(mapName, frameName);
        frames.add(frame);
        currentFrame = 0;
    }

    VectorField() {
        init();

        drawMode = false;

        Frame frame = new Frame("frame");
        frames.add(frame);
        frame = new Frame("jupi");
        frames.add(frame);
        currentFrame = 0;
    }

    private void init() {
        tasks =  new ArrayList<Spread>();
        frames = new ArrayList<Frame>();
    }

    public void finishDrawing() {
        createFrame();
        frame().save(name);
    }


    public Frame loadMap(String name, String frameName) {
        File file;
        Scanner scanner;
        String row;
        int lines, w, h;
        Vector2[][] field;
        Frame f;

        try {
            file = new File("C:/Users/weseli/Documents/ins_brain/maps/" + name + ".bw");
            scanner = new Scanner(file);
            row = "";
            lines = 0;
            field = null;

            while (scanner.hasNextLine()) {
                lines++;
                row = scanner.nextLine();
            }

            w = row.split(",").length;
            h = lines;
            field = new Vector2[h][w];
            map = new float[h][w];

            scanner.close();

            lines = 0;
            scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                row = scanner.nextLine();
                String[] args = row.split(",");

                for (int x = 0; x < args.length; x++) {
                    map[lines][x] = Float.parseFloat(args[x]);
                }
                lines++;
            }
            scanner.close();

            f = new Frame(field);
            createFrame();
            f.save(frameName);

        } catch (FileNotFoundException e) {
            f = null;
            System.out.println("Nenasla sa bitmapa");
        }

        return f;
    }

    public Frame frame() {
        return frames.get(currentFrame);
    }

    public Frame frame(int index) {
        return frames.get(index);
    }

    public void nextFrame() {
        currentFrame = (currentFrame == frames.size() - 1) ? 0 : currentFrame + 1;
    }

    public void nextFrame(boolean willShuffle) {
        
        if (frame().isShuffle()) {
            nextFrame();
            return;
        }

        int next = currentFrame + 1;

        if (currentFrame == frames.size() - 1) {
            frames.add(new Frame(200, 100).shuffle());
        } else if (!frame(next).isShuffle()) {
            frames.add(next, new Frame(200, 100).shuffle());
        }

        nextFrame();
    }

    public void setPixel(Vector2 mouse) {
        int[] coords;

        coords = frame().getCoords(mouse);

        map[coords[1]][coords[0]] = PIXEL;
    }

    public void removePixel(Vector2 mouse) {
        int[] coords;

        coords = frame().getCoords(mouse);

        map[coords[1]][coords[0]] = UNVISITED;
    }

    public void createFrame() {
        for (int y = 0; y < frame().h(); y++) {
            for (int x = 0; x < frame().w(); x++) {
                if (map[y][x] == PIXEL) {
                    simulateRecursion(x, y);
                }
            }
        }
    }

    private class Spread {
        int x, y, xFrom, yFrom;
        float level;

        Spread(int x, int y, int xFrom, int yFrom, float level) {
            this.x = x;
            this.y = y;
            this.xFrom = xFrom;
            this.yFrom = yFrom;
            this.level = level;
        }
    }

    private void simulateRecursion(int x, int y) {
        float angle;

        angle = (float)(Math.random() * 2.0 * Math.PI);

        frame().set(x, y, new Vector2(
            (float)Math.cos(angle) * forceNoise,
            (float)Math.sin(angle) * forceNoise
        ));


        tasks.add(new Spread(x, y, 0, 0, 0));

        while(tasks.size() > 0) {
            Spread args = tasks.remove(tasks.size() - 1);

            spread(args.x, args.y, args.xFrom, args.yFrom, args.level);
        }
        
        
    }

    private void spread(int x, int y, int xFrom, int yFrom, float level) {
        apply(x + 1, y, x, y, level + 1);
        apply(x - 1, y, x, y, level + 1);
        apply(x, y + 1, x, y, level + 1);
        apply(x, y - 1, x, y, level + 1);

        apply(x + 1, y - 1, x, y, level + diagonal);
        apply(x + 1, y + 1, x, y, level + diagonal);
        apply(x - 1, y - 1, x, y, level + diagonal);
        apply(x - 1, y + 1, x, y, level + diagonal);
    }

    private void apply(int x, int y, int xFrom, int yFrom, float level) {
        if (x >= frame().w() || x < 0 || y >= frame().h() || y < 0) {
            return;
        }

        float v = map[y][x];

        if (v == PIXEL) {
            return;
        }

        if (v != UNVISITED && level >= v) {
            return;
        }

        Vector2 force = new Vector2(xFrom - x, yFrom - y);
        float push = -(float)Math.exp(-(baseForce * level) + 1.0) + 3.0;
        force.multiply(push / force.getLength());
        
        map[y][x] = level;
        frame().set(x, y, force);
    
        tasks.add(new Spread(x, y, xFrom, yFrom, level));
    }

    public Vector2 f(Vector2 pos) {
        return frame().get(pos);
    }

    public void drawRect(Vector2 pos, Vector2 size) {
        line(pos.x, pos.y, pos.x + size.x, pos.y);
        line(pos.x + size.x, pos.y, pos.x + size.x, pos.y + size.y);
        line(pos.x + size.x, pos.y + size.y, pos.x, pos.y + size.y);
        line(pos.x, pos.y + size.y, pos.x, pos.y);
    }

    public void draw() {
        Vector2 size;
        float r, min;

        if (!drawMode) return;

        size = new Vector2(1 / frame().transform.x, 1 / frame().transform.y);
        stroke(255, 150, 0);
        min = Math.min(size.x / 2, size.y / 2);
        r = min * 0.14;

        for (int y = 0; y < frame().h(); y++) {
            for (int x = 0; x < frame().w(); x++) {
                Vector2 pos = new Vector2(x * size.x, y * size.y);
                if (map[y][x] == PIXEL) {
                    rectMode(CORNER); 
                    fill(255, 150, 0);
                    rect(pos.x, pos.y, size.x, size.y);
                } else {
                    //drawRect(pos, size);
                }
                
                // Vector2 dot = field[y][x].clone();
                // dot.multiply(min - r * 1.5);
                // pos.x = pos.x + size.x / 2.0;
                // pos.y = pos.y + size.y / 2.0;

                // dot.add(pos);
                // noFill();
                // ellipseMode(CENTER);
                // ellipse(dot.x, dot.y, r, r);
            }
        }

    }
}
